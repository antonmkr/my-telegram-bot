import logging
import asyncio
import random
import requests
import openai
from telegram import Bot
from praw import Reddit
import os
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
client = openai.Client()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_CLIENT_SECRET = os.getenv("REDDIT_CLIENT_SECRET")

CHANNEL_ID = "@gachistocks"
openai.api_key = OPENAI_API_KEY

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API Reddit
reddit = Reddit(
    client_id=REDDIT_CLIENT_ID,
    client_secret=REDDIT_CLIENT_SECRET,
    user_agent="MyTelegramBot/0.1 by defiler16",
)

# üîπ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (—É–±—Ä–∞–ª–∏ BBC)
NEWS_SOURCES = {
    "Yahoo Finance": "https://finance.yahoo.com/rss/topstories",
    "TechCrunch": "https://techcrunch.com/feed/",
    "Crypto News": "https://cryptonews.com/news/feed/",
    "CNBC": "https://www.cnbc.com/id/100003114/device/rss/rss.html",
    "Bloomberg": "https://www.bloomberg.com/feeds/podcast.xml",
    "Wall Street Journal": "https://feeds.a.dj.com/rss/RSSMarketsMain.xml",
    "Investing.com": "https://www.investing.com/rss/news.rss",
    "Forbes": "https://www.forbes.com/investing/feed/",
    "Financial Times": "https://www.ft.com/rss/home",
    "MarketWatch": "https://www.marketwatch.com/rss/topstories",
    "The Economist": "https://www.economist.com/latest/rss.xml"
}

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
def fetch_latest_news():
    news_list = []
    for source, url in NEWS_SOURCES.items():
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            from xml.etree import ElementTree as ET
            root = ET.fromstring(response.text)
            items = root.findall(".//item")[:5]

            for item in items:
                title = item.find("title").text.strip()
                news_list.append(title)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {source}: {e}")
    return news_list

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å Reddit
def fetch_reddit_posts(subreddits, limit=5):
    posts = []
    try:
        for subreddit in subreddits:
            for submission in reddit.subreddit(subreddit).hot(limit=limit):
                if not submission.over_18:
                    title = submission.title.strip()
                    posts.append(title)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å Reddit: {e}")
    return posts

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä—Ç—è—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def generate_ai_text(prompt, use_gpt4=False):
    model = "gpt-4-turbo" if use_gpt4 else "gpt-3.5-turbo"
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã –≤–µ–¥–µ—à—å Telegram-–∫–∞–Ω–∞–ª. –ü–∏—à–∏ –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º, –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Å–∞–π–¥—ã, —é–º–æ—Ä –∏ —ç–º–æ—Ü–∏–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç—ã!"

# üîπ –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
finance_topics = [
    "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ 2025?",
    "–ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤—ã –ª—É—á—à–µ –≤—Å–µ–≥–æ –∑–∞—â–∏—Ç—è—Ç –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏?",
    "–ö—É–¥–∞ –≤–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ —É —Ç–µ–±—è –≤—Å–µ–≥–æ 1000$?",
    "–ö–∞–∫–∏–µ –∞–∫—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω—ã?",
    "5 –≥–ª–∞–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
    "–ö–∞–∫ –∫—Ä—É–ø–Ω—ã–µ —Ñ–æ–Ω–¥—ã —É–ø—Ä–∞–≤–ª—è—é—Ç –º–∏–ª–ª–∏–∞—Ä–¥–∞–º–∏?",
    "–ë—É–¥—É—â–µ–µ –∫—Ä–∏–ø—Ç—ã: –∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã?",
    "–õ—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ä—ã–Ω–∫–µ"
]

def generate_finance_tips():
    return generate_ai_text(f"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ: {random.choice(finance_topics)}", use_gpt4=True)

# üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ AI-—Ñ—É–Ω–∫—Ü–∏–∏
def generate_market_analysis():
    return generate_ai_text("–î–∞–π –ø—Ä–æ—Å—Ç–æ–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –≥–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ç—Ä–µ–Ω–¥—ã.", use_gpt4=True)

def generate_crypto_trends():
    return generate_ai_text("–°–≤–µ–∂–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ: –∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç—ã —Å–µ–π—á–∞—Å –Ω–∞ —Ö–∞–π–ø–µ?", use_gpt4=True)

def generate_investment_hacks():
    return generate_ai_text("–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å.", use_gpt4=True)

def generate_real_estate_tips():
    return generate_ai_text("–ö–∞–∫ –≤—ã–≥–æ–¥–Ω–æ –≤–ª–æ–∂–∏—Ç—å—Å—è –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ 2025 –≥–æ–¥—É?", use_gpt4=True)

# üîπ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
content_choices = [
    "news", "reddit", "finance_tips", "crypto_insights", "market_analysis",
    "crypto_trends", "investment_hacks", "real_estate_tips"
]

# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–±–µ–∑ Telegram-—Ä–∞–∑–º–µ—Ç–∫–∏)
def clean_and_format_text(text):
    text = text.replace("ü§ñ", "üìä")  # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º —ç–º–æ–¥–∑–∏
    text = "\n".join([line.strip() for line in text.split("\n") if line.strip()])  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    return text

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_post(bot, text):
    try:
        formatted_text = clean_and_format_text(text)
        await bot.send_message(chat_id=CHANNEL_ID, text=formatted_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

# üîπ –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def create_and_post_content(bot):
    while True:
        logger.info("üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        content_type = random.choice(content_choices)

        if content_type == "news":
            latest_news = fetch_latest_news()
            if latest_news:
                selected_news = random.choice(latest_news)
                news_text = generate_ai_text(f"–ß—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å? {selected_news}", use_gpt4=True)
                await send_post(bot, news_text)

        elif content_type == "reddit":
            reddit_posts = fetch_reddit_posts(["stocks", "technology", "crypto", "finance", "economy", "wallstreetbets"], limit=5)
            if reddit_posts:
                selected_post = random.choice(reddit_posts)
                post_text = generate_ai_text(f"–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º –ø–æ—Å—Ç–µ? {selected_post}", use_gpt4=False)
                await send_post(bot, post_text)

        elif content_type == "finance_tips":
            await send_post(bot, generate_finance_tips())

        elif content_type == "crypto_insights":
            await send_post(bot, generate_crypto_trends())

        elif content_type == "market_analysis":
            await send_post(bot, generate_market_analysis())

        delay = random.randint(1800, 7200)  # –û—Ç 30 –º–∏–Ω—É—Ç –¥–æ 2 —á–∞—Å–æ–≤
        logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {delay // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(delay)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(TELEGRAM_TOKEN)
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await create_and_post_content(bot)

if __name__ == "__main__":
    asyncio.run(main())
