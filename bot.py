import logging
import asyncio
import random
import requests
import openai
import os
from telegram import Bot, InputMediaPhoto, InputMediaVideo
from praw import Reddit
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
client = openai.Client()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_CLIENT_SECRET = os.getenv("REDDIT_CLIENT_SECRET")

CHANNEL_ID = "@gachistocks"
openai.api_key = OPENAI_API_KEY

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API Reddit
reddit = Reddit(
    client_id=REDDIT_CLIENT_ID,
    client_secret=REDDIT_CLIENT_SECRET,
    user_agent="MyTelegramBot/0.1 by defiler16",
)

# üîπ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–¥–æ–±–∞–≤–∏–ª–∏ –±–æ–ª—å—à–µ)
NEWS_SOURCES = {
    "Yahoo Finance": "https://finance.yahoo.com/rss/topstories",
    "TechCrunch": "https://techcrunch.com/feed/",
    "Crypto News": "https://cryptonews.com/news/feed/",
    "CNBC": "https://www.cnbc.com/id/100003114/device/rss/rss.html",
    "Bloomberg": "https://www.bloomberg.com/feeds/podcast.xml",
    "Wall Street Journal": "https://feeds.a.dj.com/rss/RSSMarketsMain.xml",
    "Investing.com": "https://www.investing.com/rss/news.rss",
    "Forbes": "https://www.forbes.com/investing/feed/",
    "Financial Times": "https://www.ft.com/rss/home",
    "MarketWatch": "https://www.marketwatch.com/rss/topstories",
    "The Economist": "https://www.economist.com/latest/rss.xml"
}

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
def fetch_latest_news():
    news_list = []
    for source, url in NEWS_SOURCES.items():
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            from xml.etree import ElementTree as ET
            root = ET.fromstring(response.text)
            items = root.findall(".//item")[:7]  # –ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π

            for item in items:
                title = item.find("title").text.strip()
                news_list.append(title)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {source}: {e}")
    return news_list

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å Reddit
def fetch_reddit_posts(subreddits, limit=5):
    posts = []
    try:
        for subreddit in subreddits:
            for submission in reddit.subreddit(subreddit).hot(limit=limit):
                if not submission.over_18:
                    posts.append({
                        "title": submission.title.strip(),
                        "url": submission.url if submission.url.endswith(("jpg", "png", "mp4", "gif")) else None
                    })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å Reddit: {e}")
    return posts

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Ç–µ–∫—Å—Ç–∞ (—É–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
def generate_ai_text(prompt, use_gpt4=False):
    model = "gpt-4-turbo" if use_gpt4 else "gpt-3.5-turbo"
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã –≤–µ–¥–µ—à—å Telegram-–∫–∞–Ω–∞–ª. –ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ, –∂–∏–≤–æ, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏, –∏–Ω—Å–∞–π–¥—ã –∏ –Ω–µ–º–Ω–æ–≥–æ —é–º–æ—Ä–∞."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç—ã!"

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–æ–≤ –∏ –≤–∏–¥–µ–æ
def fetch_memes():
    return fetch_reddit_posts(["memeeconomy", "wallstreetbets", "cryptocurrencymemes"], limit=5)

# üîπ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
content_choices = [
    "news", "reddit", "finance_tips", "crypto_insights",
    "market_analysis", "crypto_trends", "investment_hacks",
    "real_estate_tips", "memes"
]

# üîπ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
def clean_and_format_text(text):
    text = "\n".join([line.strip() for line in text.split("\n") if line.strip()])  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    return text

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_post(bot, text):
    try:
        formatted_text = clean_and_format_text(text)
        await bot.send_message(chat_id=CHANNEL_ID, text=formatted_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏, –≤–∏–¥–µ–æ)
async def send_media(bot, media_url, caption=""):
    try:
        if media_url.endswith(("jpg", "png")):
            await bot.send_photo(chat_id=CHANNEL_ID, photo=media_url, caption=caption)
        elif media_url.endswith(("mp4", "gif")):
            await bot.send_video(chat_id=CHANNEL_ID, video=media_url, caption=caption)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")

# üîπ –ê–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def create_and_post_content(bot):
    while True:
        logger.info("üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        content_type = random.choice(content_choices)

        if content_type == "news":
            latest_news = fetch_latest_news()
            if latest_news:
                selected_news = random.choice(latest_news)
                news_text = generate_ai_text(f"–ß—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å? {selected_news}", use_gpt4=True)
                await send_post(bot, news_text)

        elif content_type == "reddit":
            reddit_posts = fetch_reddit_posts(["stocks", "technology", "crypto", "finance", "economy", "wallstreetbets"], limit=5)
            if reddit_posts:
                selected_post = random.choice(reddit_posts)
                post_text = generate_ai_text(f"–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º –ø–æ—Å—Ç–µ? {selected_post['title']}", use_gpt4=False)
                await send_post(bot, post_text)

        elif content_type == "memes":
            memes = fetch_memes()
            if memes:
                selected_meme = random.choice(memes)
                if selected_meme["url"]:
                    await send_media(bot, selected_meme["url"], caption=selected_meme["title"])
                else:
                    await send_post(bot, selected_meme["title"])

        else:
            topic_map = {
                "finance_tips": "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–ª–µ–∑–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç",
                "crypto_insights": "–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
                "market_analysis": "–û–±–∑–æ—Ä —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                "crypto_trends": "–ö–∞–∫–æ–π –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —Ö–∞–π–ø–µ?",
                "investment_hacks": "–õ–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
                "real_estate_tips": "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
            }
            if content_type in topic_map:
                await send_post(bot, generate_ai_text(topic_map[content_type], use_gpt4=True))

        delay = random.randint(1800, 7200)  # –û—Ç 30 –º–∏–Ω—É—Ç –¥–æ 2 —á–∞—Å–æ–≤
        logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {delay // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(delay)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(TELEGRAM_TOKEN)
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await create_and_post_content(bot)

if __name__ == "__main__":
    asyncio.run(main())
