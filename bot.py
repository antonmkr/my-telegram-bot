import logging
import asyncio
import random
import requests
import openai
from telegram import Bot
from praw import Reddit

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
client = openai.Client()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_CLIENT_SECRET = os.getenv("REDDIT_CLIENT_SECRET")

CHANNEL_ID = "@gachistocks"

# üîπ Reddit API Credentials
REDDIT_USER_AGENT = "MyTelegramBot/0.1 by defiler16"

openai.api_key = OPENAI_API_KEY

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API Reddit
reddit = Reddit(
    client_id=REDDIT_CLIENT_ID,
    client_secret=REDDIT_CLIENT_SECRET,
    user_agent=REDDIT_USER_AGENT,
)

# üîπ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
NEWS_SOURCES = {
    "Yahoo Finance": "https://finance.yahoo.com/rss/topstories",
    "BBC News": "http://feeds.bbci.co.uk/news/rss.xml",
    "TechCrunch": "https://techcrunch.com/feed/",
    "Crypto News": "https://cryptonews.com/news/feed/",
}

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã)
def fetch_latest_news():
    news_list = []
    for source, url in NEWS_SOURCES.items():
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            from xml.etree import ElementTree as ET
            root = ET.fromstring(response.text)
            items = root.findall(".//item")[:3]  # –ë–µ—Ä–µ–º 3 —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏

            for item in items:
                title = item.find("title").text.strip()
                if len(title) > 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    title = title[:100] + "..."
                news_list.append(title)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {source}: {e}")

    return news_list

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞–π–ø–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å Reddit
def fetch_reddit_posts(subreddits, limit=3):
    posts = []
    try:
        for subreddit in subreddits:
            logger.info(f"üì¢ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ r/{subreddit}...")
            for submission in reddit.subreddit(subreddit).hot(limit=limit):
                if not submission.over_18:
                    title = submission.title.strip()
                    if len(title) > 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        title = title[:100] + "..."
                    posts.append(title)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å Reddit: {e}")
    return posts

# üîπ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (GPT-4 –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, GPT-3.5 –¥–ª—è –º–µ–º–æ–≤)
def generate_ai_text(prompt, use_gpt4=False):
    model = "gpt-4-turbo" if use_gpt4 else "gpt-3.5-turbo"

    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã –≤–µ–¥–µ—à—å Telegram-–∫–∞–Ω–∞–ª. –ü–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏ –∏ –∏–Ω—Å–∞–π–¥—ã."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ AI: {e}")
        return "ü§ñ –û—à–∏–±–∫–∞ AI. –û–±—Å—É–¥–∏–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!"

# üîπ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –¥–µ–Ω—å–≥–∞–º –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
def generate_finance_tips():
    topics = [
        "–õ—É—á—à–∏–µ —Å–ø–æ—Å–æ–±—ã –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –≤ 2025 –≥–æ–¥—É",
        "–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–µ–±—è?",
        "–ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤—ã –∑–∞—â–∏—â–∞—é—Ç –¥–µ–Ω—å–≥–∏ –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏?",
        "–ö–∞–∫ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?",
        "–û—à–∏–±–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å"
    ]
    chosen_topic = random.choice(topics)
    return generate_ai_text(f"–î–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Ç–µ–º—É: {chosen_topic}", use_gpt4=True)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
async def send_post(bot, text):
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ Telegram: {e}")

# üîπ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ—Å—Ç–∏–Ω–≥–∞
async def create_and_post_content(bot):
    while True:
        logger.info("üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ AI-–∫–æ–Ω—Ç–µ–Ω—Ç–∞...")

        content_choices = ["news", "reddit", "finance_tips"]
        content_type = random.choice(content_choices)

        if content_type == "news":
            latest_news = fetch_latest_news()
            if latest_news:
                selected_news = random.choice(latest_news)
                news_text = generate_ai_text(
                    f"–†–∞–∑–±–µ—Ä–∏ —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –∫—Ä–∞—Ç–∫–æ: {selected_news}. –î–æ–±–∞–≤—å –º–Ω–µ–Ω–∏–µ –∏ –∏–Ω—Å–∞–π–¥—ã.",
                    use_gpt4=True)
                await send_post(bot, news_text)
            else:
                logger.warning("‚ö† –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")

        elif content_type == "reddit":
            reddit_posts = fetch_reddit_posts(["stocks", "technology", "crypto", "finance"], limit=3)
            if reddit_posts:
                selected_post = random.choice(reddit_posts)
                post_text = generate_ai_text(
                    f"–î–∞–π —Å–≤–æ–π –∫—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ—Å—Ç–∞: {selected_post}. –ü–∏—à–∏ –∂–∏–≤–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
                    use_gpt4=False)
                await send_post(bot, post_text)
            else:
                logger.warning("‚ö† –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ Reddit")

        else:  # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã
            tip_text = generate_finance_tips()
            await send_post(bot, tip_text)

        # ‚è≥ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ 5 —á–∞—Å–æ–≤)
        delay = random.randint(1800, 10800)  # –£–º–µ–Ω—å—à–∏–ª –º–∞–∫—Å. –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 3 —á–∞—Å–æ–≤
        logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {delay // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(delay)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(TELEGRAM_TOKEN)
    logger.info("üöÄ AI-–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await create_and_post_content(bot)

if __name__ == "__main__":
    asyncio.run(main())
