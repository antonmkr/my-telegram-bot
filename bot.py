import logging
import asyncio
import random
import requests
import openai
import os
from telegram import Bot
from praw import Reddit
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
client = openai.Client()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_CLIENT_SECRET = os.getenv("REDDIT_CLIENT_SECRET")
CHANNEL_ID = "@gachistocks"

# üîπ Reddit API Credentials
REDDIT_USER_AGENT = "MyTelegramBot/0.1 by defiler16"
openai.api_key = OPENAI_API_KEY

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API Reddit
reddit = Reddit(
    client_id=REDDIT_CLIENT_ID,
    client_secret=REDDIT_CLIENT_SECRET,
    user_agent=REDDIT_USER_AGENT,
)

# üîπ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
NEWS_SOURCES = {
    "Yahoo Finance": "https://finance.yahoo.com/rss/topstories",
    "BBC News": "http://feeds.bbci.co.uk/news/rss.xml",
    "TechCrunch": "https://techcrunch.com/feed/",
    "Crypto News": "https://cryptonews.com/news/feed/",
}

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π (—Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏)
def fetch_latest_news():
    news_list = []
    for source, url in NEWS_SOURCES.items():
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            from xml.etree import ElementTree as ET
            root = ET.fromstring(response.text)
            items = root.findall(".//item")[:3]

            for item in items:
                title = item.find("title").text.strip()
                if len(title) > 100:
                    title = title[:100] + "..."
                news_list.append(title)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {source}: {e}")

    return news_list

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞–π–ø–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å Reddit (–∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–º—ã)
def fetch_reddit_posts():
    subreddits = ["stocks", "technology", "crypto", "finance", "memes", "funny", "programming"]
    posts = []
    try:
        subreddit = random.choice(subreddits)
        logger.info(f"üì¢ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ r/{subreddit}...")
        for submission in reddit.subreddit(subreddit).hot(limit=5):
            if not submission.over_18:
                title = submission.title.strip()
                if len(title) > 100:
                    title = title[:100] + "..."
                posts.append(title)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å Reddit: {e}")
    return posts

# üîπ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏, –∏–Ω—Å–∞–π–¥—ã, –º–µ–º—ã)
def generate_ai_text(prompt, use_gpt4=False):
    model = "gpt-4-turbo" if use_gpt4 else "gpt-3.5-turbo"
    styles = [
        "–ü–∏—à–∏ —Å —à—É—Ç–∫–∞–º–∏ –∏ –º–µ–º–∞–º–∏",
        "–î–æ–±–∞–≤—å –∏–Ω—Å–∞–π–¥—ã –∏ —Å–¥–µ–ª–∞–π —ç—Ç–æ —Å–µ–Ω—Å–∞—Ü–∏–µ–π!",
        "–†–∞–∑–±–µ—Ä–∏ —Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç",
        "–ù–∞–ø–∏—à–∏ —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–æ –≥–æ—Ä—è—á–∞—è –Ω–æ–≤–æ—Å—Ç—å!",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ –¥–ª—è –¥—Ä—É–≥–∞",
    ]
    style = random.choice(styles)

    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": f"–¢—ã –≤–µ–¥–µ—à—å Telegram-–∫–∞–Ω–∞–ª. {style}"},
                {"role": "user", "content": prompt}
            ],
            max_tokens=700
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ AI: {e}")
        return "ü§ñ –û—à–∏–±–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"

# üîπ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –¥–µ–Ω—å–≥–∞–º, –∫—Ä–∏–ø—Ç–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
def generate_finance_tips():
    topics = [
        "–ö–∞–∫–æ–π –±–∏–∑–Ω–µ—Å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ 2025 –≥–æ–¥—É?",
        "–°—Ç–æ–∏—Ç –ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Å–µ–π—á–∞—Å?",
        "–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–∫—Ü–∏—è—Ö –±–µ–∑ —Ä–∏—Å–∫–∞?",
        "–ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
        "–ö–∞–∫–∏–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã —Å–µ–π—á–∞—Å –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è?",
        "–ö–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö?",
    ]
    chosen_topic = random.choice(topics)
    return generate_ai_text(f"–î–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ: {chosen_topic}", use_gpt4=True)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ Telegram
async def send_post(bot, text):
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ Telegram: {e}")

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ—Å—Ç–∏–Ω–≥
async def create_and_post_content(bot):
    while True:
        logger.info("üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ AI-–∫–æ–Ω—Ç–µ–Ω—Ç–∞...")

        content_choices = ["news", "reddit", "finance_tips"]
        content_type = random.choice(content_choices)

        if content_type == "news":
            latest_news = fetch_latest_news()
            if latest_news:
                selected_news = random.choice(latest_news)
                news_text = generate_ai_text(
                    f"üî• –†–∞–∑–±–µ—Ä–∏ —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ: {selected_news}. –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–∏ –∏ –∏–Ω—Å–∞–π–¥—ã.",
                    use_gpt4=True)
                await send_post(bot, news_text)
            else:
                logger.warning("‚ö† –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")

        elif content_type == "reddit":
            reddit_posts = fetch_reddit_posts()
            if reddit_posts:
                selected_post = random.choice(reddit_posts)
                post_text = generate_ai_text(
                    f"üé≠ –î–∞–π —Å–≤–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞: {selected_post}. –°–¥–µ–ª–∞–π –∫—Ä—É—Ç–æ!",
                    use_gpt4=False)
                await send_post(bot, post_text)
            else:
                logger.warning("‚ö† –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ Reddit")

        else:  # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã
            tip_text = generate_finance_tips()
            await send_post(bot, tip_text)

        # ‚è≥ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (30 –º–∏–Ω—É—Ç - 3 —á–∞—Å–∞)
        delay = random.randint(1800, 10800)
        logger.info(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {delay // 60} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(delay)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(TELEGRAM_TOKEN)
    logger.info("üöÄ AI-–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await create_and_post_content(bot)

if __name__ == "__main__":
    asyncio.run(main())
